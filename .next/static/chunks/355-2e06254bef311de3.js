"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[355],{34355:(t,a,e)=>{e.d(a,{$:()=>s});var o=e(89624),c=e(55594);let n=(0,o.w)({server:{},client:{NEXT_PUBLIC_API_URL:c.z.string().url()},runtimeEnv:{NEXT_PUBLIC_API_URL:"http://localhost:4545"}});n.NEXT_PUBLIC_API_URL;class s{static getInstance(t){if(s.instance)return void 0!==t&&s.instance.setAccessToken(t),s.instance;if(void 0===t)try{let a=localStorage.getItem("access_token");a&&(t=a)}catch(t){console.error("APISDK: Error accessing localStorage:",t)}return s.instance=new s(t||null),s.instance}setAccessToken(t){this.accessToken=t}async getUser(){if(!this.accessToken)throw console.error("APISDK: No access token available for getUser request"),Error("Authentication required");let t=await fetch("".concat(s.BASE_URL,"/auth/user"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get user: ".concat(t.status," ").concat(t.statusText));return await t.json()}async loginRequest(t,a){let e=await fetch("".concat(s.BASE_URL,"/auth/login-request"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({country_code:t,phone_number:a})});if(!e.ok)throw Error("Failed to login request: ".concat(e.status," ").concat(e.statusText));return await e.json()}async verifyAccountAccess(t,a,e){let o=await fetch("".concat(s.BASE_URL,"/auth/verify-account-access"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({country_code:t,phone_number:a,otp:e})});if(!o.ok)throw Error("Failed to verify account access: ".concat(o.status," ").concat(o.statusText));return await o.json()}async getDishCategories(){let t=await fetch("".concat(s.BASE_URL,"/dish/categories"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get dish categories: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getDishCategoryById(t){let a=await fetch("".concat(s.BASE_URL,"/dish/categories/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get dish category by id: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getDishById(t){let a=await fetch("".concat(s.BASE_URL,"/dish/i/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get dish by id: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getContactMessages(){let t=await fetch("".concat(s.BASE_URL,"/message"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get contact messages: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getContactMessageById(t){let a=await fetch("".concat(s.BASE_URL,"/message/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get contact message: ".concat(a.status," ").concat(a.statusText));return await a.json()}async updateContactMessageStatus(t,a){let e=await fetch("".concat(s.BASE_URL,"/message/").concat(t,"/read"),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({is_read:a})});if(!e.ok)throw Error("Failed to update message status: ".concat(e.status," ").concat(e.statusText))}async deleteContactMessage(t){let a=await fetch("".concat(s.BASE_URL,"/message/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete message: ".concat(a.status," ").concat(a.statusText))}async getDishes(){let t=await fetch("".concat(s.BASE_URL,"/dish/dishes"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get dishes: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getDishesByCategoryId(t){let a=await fetch("".concat(s.BASE_URL,"/dish/dishes/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get dishes by category id: ".concat(a.status," ").concat(a.statusText));return await a.json()}async createDishCategory(t,a){let e=await fetch("".concat(s.BASE_URL,"/dish/categories"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:t,picture:a})});if(!e.ok)throw Error("Failed to create dish category: ".concat(e.status," ").concat(e.statusText));return await e.json()}async updateDishCategory(t,a,e){let o=await fetch("".concat(s.BASE_URL,"/dish/categories/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:a,picture:e})});if(!o.ok)throw Error("Failed to update dish category: ".concat(o.status," ").concat(o.statusText))}async deleteDishCategory(t){let a=await fetch("".concat(s.BASE_URL,"/dish/categories/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete dish category: ".concat(a.status," ").concat(a.statusText))}async createDish(t){let{name:a,price:e,dish_category_id:o,is_available:c,is_non_veg:n,meta_data:r,picture:i}=t,h=await fetch("".concat(s.BASE_URL,"/dish"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:a,price:e,picture:i,dish_category_id:o,is_available:c,is_non_veg:n,meta_data:r})});if(!h.ok)throw Error("Failed to create dish: ".concat(h.status," ").concat(h.statusText));return await h.json()}async updateDish(t,a){let{name:e,price:o,picture:c,dish_category_id:n,is_available:r,is_non_veg:i,meta_data:h}=a,d=await fetch("".concat(s.BASE_URL,"/dish/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:e,price:o,picture:c,dish_category_id:n,is_available:r,is_non_veg:i,meta_data:h})});if(!d.ok)throw Error("Failed to update dish: ".concat(d.status," ").concat(d.statusText))}async deleteDish(t){let a=await fetch("".concat(s.BASE_URL,"/dish/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete dish: ".concat(a.status," ").concat(a.statusText))}async getTables(){let t=await fetch("".concat(s.BASE_URL,"/dine-in/tables"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get tables: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getTableById(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/tables/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get table: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getTableByTableNumber(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/tables/by-no/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get table: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getBooking(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/bookings/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get booking: ".concat(a.status," ").concat(a.statusText));return await a.json()}async createBooking(t){let{table_id:a,booking_date:e,booking_time:o,from_time:c,to_time:n,number_of_people:r}=t,i=await fetch("".concat(s.BASE_URL,"/dine-in/bookings"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({table_id:a,booking_date:e,booking_time:o,from_time:c,to_time:n,number_of_people:r})});if(!i.ok)throw Error("Failed to create booking: ".concat(i.status," ").concat(i.statusText));return await i.json()}async updateBooking(t,a){let e=await fetch("".concat(s.BASE_URL,"/dine-in/bookings/").concat(t),{method:"PUT",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(a)});if(!e.ok)throw Error("Failed to update booking: ".concat(e.status," ").concat(e.statusText));return await e.json()}async deleteBooking(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/bookings/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete booking: ".concat(a.status," ").concat(a.statusText));return await a.json()}async markBookingAsCancelled(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/bookings/cancel/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to mark booking as cancelled: ".concat(a.status," ").concat(a.statusText));return await a.json()}async markBookingAsCompleted(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/bookings/complete/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to mark booking as completed: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getOrderById(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/orders/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get order: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getOrdersByBookingId(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/orders/booking/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get orders: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getOrdersByUserId(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/orders/user/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get orders: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getOrdersByTableId(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/orders/table/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get orders: ".concat(a.status," ").concat(a.statusText));return await a.json()}async createOrder(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/orders"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to create order: ".concat(a.status," ").concat(a.statusText));return await a.json()}async markOrderAsCancelled(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/orders/cancel/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to mark order as cancelled: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getCheckoutById(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get checkout: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getCheckoutByBookingId(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts/booking/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get checkout: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getCheckoutByUserId(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts/user/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get checkout: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getCheckoutByTableId(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts/table/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get checkout: ".concat(a.status," ").concat(a.statusText));return await a.json()}async createUserEndCheckout(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({booking_id:t})});if(!a.ok)throw Error("Failed to create checkout: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getAvailableTables(t,a){let e=await fetch("".concat(s.BASE_URL,"/dine-in/available-tables"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({from_time:t,to_time:a})});if(!e.ok)throw Error("Failed to get available tables: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getCheckouts(){let t=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get checkouts: ".concat(t.status," ").concat(t.statusText));return await t.json()}async updateCheckout(t,a){let e=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(a)});if(!e.ok)throw Error("Failed to update checkout: ".concat(e.status," ").concat(e.statusText));return await e.json()}async deleteCheckout(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete checkout: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getOrders(){let t=await fetch("".concat(s.BASE_URL,"/dine-in/orders"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get orders: ".concat(t.status," ").concat(t.statusText));return await t.json()}async markOrderAsReady(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/orders/ready/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to mark order as ready: ".concat(a.status," ").concat(a.statusText));return await a.json()}async markOrderAsServed(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/orders/serve/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to mark order as served: ".concat(a.status," ").concat(a.statusText));return await a.json()}async markOrderAsPreparing(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/orders/prepare/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to mark order as served: ".concat(a.status," ").concat(a.statusText));return await a.json()}async updateOrder(t,a){let e=await fetch("".concat(s.BASE_URL,"/dine-in/orders/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(a)});if(!e.ok)throw Error("Failed to update order: ".concat(e.status," ").concat(e.statusText));return await e.json()}async updateOrDeleteOrder(t,a){let e=await fetch("".concat(s.BASE_URL,"/dine-in/orders/update/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(a)});if(!e.ok)throw Error("Failed to update order: ".concat(e.status," ").concat(e.statusText));return await e.json()}async deleteOrder(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/orders/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete order: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getBookings(){let t=await fetch("".concat(s.BASE_URL,"/dine-in/bookings"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get bookings: ".concat(t.status," ").concat(t.statusText));return await t.json()}async createTable(t){let{table_number:a,capacity:e,meta_data:o}=t,c=await fetch("".concat(s.BASE_URL,"/dine-in/tables"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({table_number:a,capacity:e,meta_data:o})});if(!c.ok)throw Error("Failed to create table: ".concat(c.status," ").concat(c.statusText));return await c.json()}async updateTable(t,a){let{table_number:e,capacity:o,meta_data:c}=a,n=await fetch("".concat(s.BASE_URL,"/dine-in/tables/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({table_number:e,capacity:o,meta_data:c})});if(!n.ok)throw Error("Failed to update table: ".concat(n.status," ").concat(n.statusText));return await n.json()}async deleteTable(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/tables/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete table: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getReviewsByDish(t){let a=await fetch("".concat(s.BASE_URL,"/reviews/d/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get reviews by dish: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getReviewsByProduct(t){let a=await fetch("".concat(s.BASE_URL,"/reviews/p/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get reviews by dish: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getReview(t){let a=await fetch("".concat(s.BASE_URL,"/reviews/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get review: ".concat(a.status," ").concat(a.statusText));return await a.json()}async createReview(t){let{product_id:a,dish_id:e,rating:o,comment:c,meta_data:n}=t,r=await fetch("".concat(s.BASE_URL,"/reviews"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({product_id:a,dish_id:e,rating:o,comment:c,meta_data:n})});if(!r.ok)throw Error("Failed to create review: ".concat(r.status," ").concat(r.statusText));return await r.json()}async deleteReview(t){let a=await fetch("".concat(s.BASE_URL,"/reviews/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete review: ".concat(a.status," ").concat(a.statusText));return await a.json()}async updateReview(t,a){let{rating:e,comment:o,meta_data:c}=a,n=await fetch("".concat(s.BASE_URL,"/reviews/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({rating:e,comment:o,meta_data:c})});if(!n.ok)throw Error("Failed to update review: ".concat(n.status," ").concat(n.statusText));return await n.json()}async getAverageRatingForDish(t){let a=await fetch("".concat(s.BASE_URL,"/reviews/avg/d/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get average rating for dish: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getAverageRatingForProduct(t){let a=await fetch("".concat(s.BASE_URL,"/reviews/avg/p/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get average rating for product: ".concat(a.status," ").concat(a.statusText));return await a.json()}async uploadFile(t){let a=new FormData;a.append("file",t);let e=await fetch("".concat(s.BASE_URL,"/upload"),{method:"PUT",headers:{Authorization:"Bearer ".concat(this.accessToken)},body:a});if(!e.ok)throw Error("Failed to upload file: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getReservations(t,a){let e=await fetch("".concat(s.BASE_URL,"/dine-in/reservations?page=").concat(t,"&limit=").concat(a),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get reservations: ".concat(e.status," ").concat(e.statusText));return await e.json()}async markTableAsCleaned(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/tables/cleaned/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to mark table as cleaned: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getTableStats(){let t=await fetch("".concat(s.BASE_URL,"/dine-in/table-stats"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get table stats: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getAllAssistance(){let t=await fetch("".concat(s.BASE_URL,"/dine-in/assistance"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get assistance: ".concat(t.status," ").concat(t.statusText));return await t.json()}async deleteAssistance(t){let a=await fetch("".concat(s.BASE_URL,"/dine-in/assistance/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete assistance: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getAdminUsers(){let t=await fetch("".concat(s.BASE_URL,"/admin/users"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get admin users: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getAllStats(){let t=await fetch("".concat(s.BASE_URL,"/admin/allstats"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get all stats: ".concat(t.status," ").concat(t.statusText));return await t.json()}async createBanner(t){let a=await fetch("".concat(s.BASE_URL,"/banner/create"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.accessToken)},body:t});if(!a.ok)throw Error("Failed to create banner: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getBanners(){let t=await fetch("".concat(s.BASE_URL,"/banner"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get banners: ".concat(t.status," ").concat(t.statusText));return await t.json()}async deleteBanner(t){let a=await fetch("".concat(s.BASE_URL,"/banner/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete banner: ".concat(a.status," ").concat(a.statusText))}async createEmployee(t){let a=await fetch("".concat(s.BASE_URL,"/admin/staff"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to create employee: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getEmployees(){let t=await fetch("".concat(s.BASE_URL,"/admin/staff"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get employees: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getEmployeeById(t){let a=await fetch("".concat(s.BASE_URL,"/admin/staff/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get employee: ".concat(a.status," ").concat(a.statusText));return await a.json()}async updateEmployee(t,a){let e=await fetch("".concat(s.BASE_URL,"/admin/staff/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(a)});if(!e.ok)throw Error("Failed to update employee: ".concat(e.status," ").concat(e.statusText));return await e.json()}async deleteEmployee(t){let a=await fetch("".concat(s.BASE_URL,"/admin/staff/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete employee: ".concat(a.status," ").concat(a.statusText));return await a.json()}async createNewCategory(t,a){let e=await fetch("".concat(s.BASE_URL,"/category"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:t,image_url:a})});if(!e.ok)throw Error("Failed to create category: ".concat(e.status," ").concat(e.statusText));return(await e.json()).id}async getAllCategories(){let t=await fetch("".concat(s.BASE_URL,"/category"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get categories: ".concat(t.status," ").concat(t.statusText));return await t.json()}async updateCategory(t,a,e){let o=await fetch("".concat(s.BASE_URL,"/category/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:a,image_url:e})});if(!o.ok)throw Error("Failed to update category: ".concat(o.status," ").concat(o.statusText))}async deleteCategory(t){let a=await fetch("".concat(s.BASE_URL,"/category/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete category: ".concat(a.status," ").concat(a.statusText))}async getCategoryById(t){let a=await fetch("".concat(s.BASE_URL,"/category/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get category by id: ".concat(a.status," ").concat(a.statusText));return await a.json()}async createNewSubCategory(t,a,e){let o=await fetch("".concat(s.BASE_URL,"/subcategory"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:t,category_id:a,image_url:e})});if(!o.ok)throw Error("Failed to create subcategory: ".concat(o.status," ").concat(o.statusText));return(await o.json()).id}async getAllSubCategories(){let t=await fetch("".concat(s.BASE_URL,"/subcategory"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get subcategories: ".concat(t.status," ").concat(t.statusText));return await t.json()}async updateSubCategory(t,a,e,o){let c=await fetch("".concat(s.BASE_URL,"/subcategory/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:a,category_id:e,image_url:o})});if(!c.ok)throw Error("Failed to update subcategory: ".concat(c.status," ").concat(c.statusText))}async deleteSubCategory(t){let a=await fetch("".concat(s.BASE_URL,"/subcategory/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete subcategory: ".concat(a.status," ").concat(a.statusText))}async getSubCategoryById(t){let a=await fetch("".concat(s.BASE_URL,"/subcategory/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get subcategory by id: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getSubCategoriesByCategoryId(t){let a=await fetch("".concat(s.BASE_URL,"/subcategory/c/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get subcategories by category id: ".concat(a.status," ").concat(a.statusText));return await a.json()}async createProduct(t){let{name:a,description:e,price:o,image_url:c,category_id:n,subcategory_id:r,meta_data:i,is_active:h,availability_count:d}=t,u=await fetch("".concat(s.BASE_URL,"/product"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:a,description:e,price:o,image_url:c,category_id:n,subcategory_id:r,meta_data:i,is_active:h,availability_count:d})});if(!u.ok)throw Error("Failed to create product: ".concat(u.status," ").concat(u.statusText));return(await u.json()).id}async updateProduct(t,a){let e=await fetch("".concat(s.BASE_URL,"/product/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(a)});if(!e.ok)throw Error("Failed to update product: ".concat(e.status," ").concat(e.statusText))}async deleteProduct(t){let a=await fetch("".concat(s.BASE_URL,"/product/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete product: ".concat(a.status," ").concat(a.statusText))}async getProductsByCategory(t,a){let{category_id:e,subcategory_id:o}=t,{limit:c,page:n}=a,r=new URLSearchParams;e&&r.append("category_id",e),o&&r.append("subcategory_id",o),r.append("limit",c.toString()),r.append("page",n.toString());let i=await fetch("".concat(s.BASE_URL,"/product?").concat(r.toString()),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!i.ok)throw Error("Failed to get products: ".concat(i.status," ").concat(i.statusText));return await i.json()}async getProductByCategoryId(t){let a=await fetch("".concat(s.BASE_URL,"/product/c/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get product: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getProductBySubCategoryId(t){let a=await fetch("".concat(s.BASE_URL,"/product/s/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get product: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getProductById(t){let a=await fetch("".concat(s.BASE_URL,"/product/i/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get product: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getProductCount(t){let{category_id:a,subcategory_id:e}=t,o=new URLSearchParams;a&&o.append("category_id",a),e&&o.append("subcategory_id",e);let c=await fetch("".concat(s.BASE_URL,"/product/count?").concat(o.toString()),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!c.ok)throw Error("Failed to get product count: ".concat(c.status," ").concat(c.statusText));return(await c.json()).count}async getProductsByIds(t){let a=await fetch("".concat(s.BASE_URL,"/product/ids"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({ids:t})});if(!a.ok)throw Error("Failed to get products by ids: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getReviewsByProductId(t){let a=await fetch("".concat(s.BASE_URL,"/review/p/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get products by ids: ".concat(a.status," ").concat(a.statusText));return await a.json()}async deleteReviewById(t){let a=await fetch("".concat(s.BASE_URL,"/review/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get products by ids: ".concat(a.status," ").concat(a.statusText));return await a.json()}async averageRatingsByProductId(t){let a=await fetch("".concat(s.BASE_URL,"/review/avg/p/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get products by ids: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getCoupons(){let t=await fetch("".concat(s.BASE_URL,"/coupon"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get coupons: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getCoupon(t){let a=await fetch("".concat(s.BASE_URL,"/coupon/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get coupon: ".concat(a.status," ").concat(a.statusText));return await a.json()}async createCoupon(t){let a=await fetch("".concat(s.BASE_URL,"/coupon"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to create coupon: ".concat(a.status," ").concat(a.statusText));return(await a.json()).id}async updateCoupon(t,a){let e=await fetch("".concat(s.BASE_URL,"/coupon/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(a)});if(!e.ok)throw Error("Failed to update coupon: ".concat(e.status," ").concat(e.statusText))}async deleteCoupon(t){let a=await fetch("".concat(s.BASE_URL,"/coupon/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete coupon: ".concat(a.status," ").concat(a.statusText))}async getSales(){let t=await fetch("".concat(s.BASE_URL,"/sales"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get sales: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getSale(t){let a=await fetch("".concat(s.BASE_URL,"/sales/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get sale: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getSaleProducts(t,a){let e=await fetch("".concat(s.BASE_URL,"/sales/").concat(t,"/").concat(a,"/products"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get sale products: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getCurrentSalesOverProduct(t){let a=await fetch("".concat(s.BASE_URL,"/sales/over/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get current sales over product: ".concat(a.status," ").concat(a.statusText));return await a.json()}async createSale(t){let a=await fetch("".concat(s.BASE_URL,"/sales"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(t)});if(!a.ok)throw Error("Failed to create sale: ".concat(a.status," ").concat(a.statusText));return await a.json()}async updateSale(t,a){let e=await fetch("".concat(s.BASE_URL,"/sales/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(a)});if(!e.ok)throw Error("Failed to update sale: ".concat(e.status," ").concat(e.statusText))}async deleteSale(t){let a=await fetch("".concat(s.BASE_URL,"/sales/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to delete sale: ".concat(a.status," ").concat(a.statusText))}constructor(t){this.accessToken=t}}s.BASE_URL=n.NEXT_PUBLIC_API_URL}}]);