"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[355],{34355:(t,e,a)=>{a.d(e,{$:()=>s});var o=a(89624),n=a(55594);let c=(0,o.w)({server:{},client:{NEXT_PUBLIC_API_URL:n.z.string().url()},runtimeEnv:{NEXT_PUBLIC_API_URL:"https://api.jeevic.com"}});c.NEXT_PUBLIC_API_URL;class s{static getInstance(t){if(s.instance)return void 0!==t&&s.instance.setAccessToken(t),s.instance;if(void 0===t)try{let e=localStorage.getItem("access_token");e&&(t=e)}catch(t){console.error("APISDK: Error accessing localStorage:",t)}return s.instance=new s(t||null),s.instance}setAccessToken(t){this.accessToken=t}async getUser(){if(!this.accessToken)throw console.error("APISDK: No access token available for getUser request"),Error("Authentication required");let t=await fetch("".concat(s.BASE_URL,"/auth/user"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get user: ".concat(t.status," ").concat(t.statusText));return await t.json()}async loginRequest(t,e){let a=await fetch("".concat(s.BASE_URL,"/auth/login-request"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({country_code:t,phone_number:e})});if(!a.ok)throw Error("Failed to login request: ".concat(a.status," ").concat(a.statusText));return await a.json()}async verifyAccountAccess(t,e,a){let o=await fetch("".concat(s.BASE_URL,"/auth/verify-account-access"),{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({country_code:t,phone_number:e,otp:a})});if(!o.ok)throw Error("Failed to verify account access: ".concat(o.status," ").concat(o.statusText));return await o.json()}async getDishCategories(){let t=await fetch("".concat(s.BASE_URL,"/dish/categories"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get dish categories: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getDishCategoryById(t){let e=await fetch("".concat(s.BASE_URL,"/dish/categories/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get dish category by id: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getDishById(t){let e=await fetch("".concat(s.BASE_URL,"/dish/i/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get dish by id: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getDishes(){let t=await fetch("".concat(s.BASE_URL,"/dish/dishes"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get dishes: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getDishesByCategoryId(t){let e=await fetch("".concat(s.BASE_URL,"/dish/dishes/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get dishes by category id: ".concat(e.status," ").concat(e.statusText));return await e.json()}async createDishCategory(t,e){let a=await fetch("".concat(s.BASE_URL,"/dish/categories"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:t,picture:e})});if(!a.ok)throw Error("Failed to create dish category: ".concat(a.status," ").concat(a.statusText));return await a.json()}async updateDishCategory(t,e,a){let o=await fetch("".concat(s.BASE_URL,"/dish/categories/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:e,picture:a})});if(!o.ok)throw Error("Failed to update dish category: ".concat(o.status," ").concat(o.statusText))}async deleteDishCategory(t){let e=await fetch("".concat(s.BASE_URL,"/dish/categories/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to delete dish category: ".concat(e.status," ").concat(e.statusText))}async createDish(t){let{name:e,price:a,dish_category_id:o,is_available:n,is_non_veg:c,meta_data:r,picture:i}=t,h=await fetch("".concat(s.BASE_URL,"/dish"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:e,price:a,picture:i,dish_category_id:o,is_available:n,is_non_veg:c,meta_data:r})});if(!h.ok)throw Error("Failed to create dish: ".concat(h.status," ").concat(h.statusText));return await h.json()}async updateDish(t,e){let{name:a,price:o,picture:n,dish_category_id:c,is_available:r,is_non_veg:i,meta_data:h}=e,d=await fetch("".concat(s.BASE_URL,"/dish/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({name:a,price:o,picture:n,dish_category_id:c,is_available:r,is_non_veg:i,meta_data:h})});if(!d.ok)throw Error("Failed to update dish: ".concat(d.status," ").concat(d.statusText))}async deleteDish(t){let e=await fetch("".concat(s.BASE_URL,"/dish/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to delete dish: ".concat(e.status," ").concat(e.statusText))}async getTables(){let t=await fetch("".concat(s.BASE_URL,"/dine-in/tables"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get tables: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getTableById(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/tables/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get table: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getTableByTableNumber(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/tables/by-no/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get table: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getBooking(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/bookings/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get booking: ".concat(e.status," ").concat(e.statusText));return await e.json()}async createBooking(t){let{table_id:e,booking_date:a,booking_time:o,from_time:n,to_time:c,number_of_people:r}=t,i=await fetch("".concat(s.BASE_URL,"/dine-in/bookings"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({table_id:e,booking_date:a,booking_time:o,from_time:n,to_time:c,number_of_people:r})});if(!i.ok)throw Error("Failed to create booking: ".concat(i.status," ").concat(i.statusText));return await i.json()}async updateBooking(t,e){let a=await fetch("".concat(s.BASE_URL,"/dine-in/bookings/").concat(t),{method:"PUT",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(e)});if(!a.ok)throw Error("Failed to update booking: ".concat(a.status," ").concat(a.statusText));return await a.json()}async deleteBooking(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/bookings/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to delete booking: ".concat(e.status," ").concat(e.statusText));return await e.json()}async markBookingAsCancelled(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/bookings/cancel/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to mark booking as cancelled: ".concat(e.status," ").concat(e.statusText));return await e.json()}async markBookingAsCompleted(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/bookings/complete/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to mark booking as completed: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getOrderById(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/orders/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get order: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getOrdersByBookingId(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/orders/booking/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get orders: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getOrdersByUserId(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/orders/user/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get orders: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getOrdersByTableId(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/orders/table/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get orders: ".concat(e.status," ").concat(e.statusText));return await e.json()}async createOrder(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/orders"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(t)});if(!e.ok)throw Error("Failed to create order: ".concat(e.status," ").concat(e.statusText));return await e.json()}async markOrderAsCancelled(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/orders/cancel/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to mark order as cancelled: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getCheckoutById(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get checkout: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getCheckoutByBookingId(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts/booking/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get checkout: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getCheckoutByUserId(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts/user/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get checkout: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getCheckoutByTableId(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts/table/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get checkout: ".concat(e.status," ").concat(e.statusText));return await e.json()}async createUserEndCheckout(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({booking_id:t})});if(!e.ok)throw Error("Failed to create checkout: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getAvailableTables(t,e){let a=await fetch("".concat(s.BASE_URL,"/dine-in/available-tables"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({from_time:t,to_time:e})});if(!a.ok)throw Error("Failed to get available tables: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getCheckouts(){let t=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get checkouts: ".concat(t.status," ").concat(t.statusText));return await t.json()}async updateCheckout(t,e){let a=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(e)});if(!a.ok)throw Error("Failed to update checkout: ".concat(a.status," ").concat(a.statusText));return await a.json()}async deleteCheckout(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/checkouts/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to delete checkout: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getOrders(){let t=await fetch("".concat(s.BASE_URL,"/dine-in/orders"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get orders: ".concat(t.status," ").concat(t.statusText));return await t.json()}async markOrderAsReady(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/orders/ready/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to mark order as ready: ".concat(e.status," ").concat(e.statusText));return await e.json()}async markOrderAsServed(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/orders/serve/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to mark order as served: ".concat(e.status," ").concat(e.statusText));return await e.json()}async markOrderAsPreparing(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/orders/prepare/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to mark order as served: ".concat(e.status," ").concat(e.statusText));return await e.json()}async updateOrder(t,e){let a=await fetch("".concat(s.BASE_URL,"/dine-in/orders/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(e)});if(!a.ok)throw Error("Failed to update order: ".concat(a.status," ").concat(a.statusText));return await a.json()}async updateOrDeleteOrder(t,e){let a=await fetch("".concat(s.BASE_URL,"/dine-in/orders/update/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify(e)});if(!a.ok)throw Error("Failed to update order: ".concat(a.status," ").concat(a.statusText));return await a.json()}async deleteOrder(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/orders/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to delete order: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getBookings(){let t=await fetch("".concat(s.BASE_URL,"/dine-in/bookings"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get bookings: ".concat(t.status," ").concat(t.statusText));return await t.json()}async createTable(t){let{table_number:e,capacity:a,meta_data:o}=t,n=await fetch("".concat(s.BASE_URL,"/dine-in/tables"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({table_number:e,capacity:a,meta_data:o})});if(!n.ok)throw Error("Failed to create table: ".concat(n.status," ").concat(n.statusText));return await n.json()}async updateTable(t,e){let{table_number:a,capacity:o,meta_data:n}=e,c=await fetch("".concat(s.BASE_URL,"/dine-in/tables/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({table_number:a,capacity:o,meta_data:n})});if(!c.ok)throw Error("Failed to update table: ".concat(c.status," ").concat(c.statusText));return await c.json()}async deleteTable(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/tables/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to delete table: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getReviewsByDish(t){let e=await fetch("".concat(s.BASE_URL,"/reviews/d/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get reviews by dish: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getReviewsByProduct(t){let e=await fetch("".concat(s.BASE_URL,"/reviews/p/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get reviews by dish: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getReview(t){let e=await fetch("".concat(s.BASE_URL,"/reviews/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get review: ".concat(e.status," ").concat(e.statusText));return await e.json()}async createReview(t){let{product_id:e,dish_id:a,rating:o,comment:n,meta_data:c}=t,r=await fetch("".concat(s.BASE_URL,"/reviews"),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({product_id:e,dish_id:a,rating:o,comment:n,meta_data:c})});if(!r.ok)throw Error("Failed to create review: ".concat(r.status," ").concat(r.statusText));return await r.json()}async deleteReview(t){let e=await fetch("".concat(s.BASE_URL,"/reviews/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to delete review: ".concat(e.status," ").concat(e.statusText));return await e.json()}async updateReview(t,e){let{rating:a,comment:o,meta_data:n}=e,c=await fetch("".concat(s.BASE_URL,"/reviews/").concat(t),{method:"PATCH",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)},body:JSON.stringify({rating:a,comment:o,meta_data:n})});if(!c.ok)throw Error("Failed to update review: ".concat(c.status," ").concat(c.statusText));return await c.json()}async getAverageRatingForDish(t){let e=await fetch("".concat(s.BASE_URL,"/reviews/avg/d/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get average rating for dish: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getAverageRatingForProduct(t){let e=await fetch("".concat(s.BASE_URL,"/reviews/avg/p/").concat(t),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to get average rating for product: ".concat(e.status," ").concat(e.statusText));return await e.json()}async uploadFile(t){let e=new FormData;e.append("file",t);let a=await fetch("".concat(s.BASE_URL,"/upload"),{method:"PUT",headers:{Authorization:"Bearer ".concat(this.accessToken)},body:e});if(!a.ok)throw Error("Failed to upload file: ".concat(a.status," ").concat(a.statusText));return await a.json()}async getReservations(t,e){let a=await fetch("".concat(s.BASE_URL,"/dine-in/reservations?page=").concat(t,"&limit=").concat(e),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!a.ok)throw Error("Failed to get reservations: ".concat(a.status," ").concat(a.statusText));return await a.json()}async markTableAsCleaned(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/tables/cleaned/").concat(t),{method:"POST",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to mark table as cleaned: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getTableStats(){let t=await fetch("".concat(s.BASE_URL,"/dine-in/table-stats"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get table stats: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getAllAssistance(){let t=await fetch("".concat(s.BASE_URL,"/dine-in/assistance"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get assistance: ".concat(t.status," ").concat(t.statusText));return await t.json()}async deleteAssistance(t){let e=await fetch("".concat(s.BASE_URL,"/dine-in/assistance/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to delete assistance: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getAdminUsers(){let t=await fetch("".concat(s.BASE_URL,"/admin/users"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get admin users: ".concat(t.status," ").concat(t.statusText));return await t.json()}async getAllStats(){let t=await fetch("".concat(s.BASE_URL,"/admin/allstats"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get all stats: ".concat(t.status," ").concat(t.statusText));return await t.json()}async createBanner(t){let e=await fetch("".concat(s.BASE_URL,"/banner/create"),{method:"POST",headers:{Authorization:"Bearer ".concat(this.accessToken)},body:t});if(!e.ok)throw Error("Failed to create banner: ".concat(e.status," ").concat(e.statusText));return await e.json()}async getBanners(){let t=await fetch("".concat(s.BASE_URL,"/banner"),{method:"GET",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!t.ok)throw Error("Failed to get banners: ".concat(t.status," ").concat(t.statusText));return await t.json()}async deleteBanner(t){let e=await fetch("".concat(s.BASE_URL,"/banner/").concat(t),{method:"DELETE",headers:{"Content-Type":"application/json",Authorization:"Bearer ".concat(this.accessToken)}});if(!e.ok)throw Error("Failed to delete banner: ".concat(e.status," ").concat(e.statusText))}constructor(t){this.accessToken=t}}s.BASE_URL=c.NEXT_PUBLIC_API_URL}}]);